// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_autothresholdr_RCPPEXPORTS_H_GEN_
#define RCPP_autothresholdr_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace autothresholdr {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("autothresholdr", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("autothresholdr", "autothresholdr_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in autothresholdr");
            }
        }
    }

    inline NumericMatrix MeanPillars(NumericVector mat3d) {
        typedef SEXP(*Ptr_MeanPillars)(SEXP);
        static Ptr_MeanPillars p_MeanPillars = NULL;
        if (p_MeanPillars == NULL) {
            validateSignature("NumericMatrix(*MeanPillars)(NumericVector)");
            p_MeanPillars = (Ptr_MeanPillars)R_GetCCallable("autothresholdr", "autothresholdr_MeanPillars");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_MeanPillars(Rcpp::wrap(mat3d));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericMatrix >(rcpp_result_gen);
    }

    inline NumericMatrix VarPillars(NumericVector mat3d) {
        typedef SEXP(*Ptr_VarPillars)(SEXP);
        static Ptr_VarPillars p_VarPillars = NULL;
        if (p_VarPillars == NULL) {
            validateSignature("NumericMatrix(*VarPillars)(NumericVector)");
            p_VarPillars = (Ptr_VarPillars)R_GetCCallable("autothresholdr", "autothresholdr_VarPillars");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_VarPillars(Rcpp::wrap(mat3d));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericMatrix >(rcpp_result_gen);
    }

    inline NumericMatrix MedianPillars(NumericVector mat3d) {
        typedef SEXP(*Ptr_MedianPillars)(SEXP);
        static Ptr_MedianPillars p_MedianPillars = NULL;
        if (p_MedianPillars == NULL) {
            validateSignature("NumericMatrix(*MedianPillars)(NumericVector)");
            p_MedianPillars = (Ptr_MedianPillars)R_GetCCallable("autothresholdr", "autothresholdr_MedianPillars");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_MedianPillars(Rcpp::wrap(mat3d));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericMatrix >(rcpp_result_gen);
    }

}

#endif // RCPP_autothresholdr_RCPPEXPORTS_H_GEN_

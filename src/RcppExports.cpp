// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/autothresholdr.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// MeanPillars
NumericMatrix MeanPillars(NumericVector mat3d);
static SEXP autothresholdr_MeanPillars_try(SEXP mat3dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mat3d(mat3dSEXP);
    rcpp_result_gen = Rcpp::wrap(MeanPillars(mat3d));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP autothresholdr_MeanPillars(SEXP mat3dSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(autothresholdr_MeanPillars_try(mat3dSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// VarPillars
NumericMatrix VarPillars(NumericVector mat3d);
static SEXP autothresholdr_VarPillars_try(SEXP mat3dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mat3d(mat3dSEXP);
    rcpp_result_gen = Rcpp::wrap(VarPillars(mat3d));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP autothresholdr_VarPillars(SEXP mat3dSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(autothresholdr_VarPillars_try(mat3dSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// MedianPillars
NumericMatrix MedianPillars(NumericVector mat3d);
static SEXP autothresholdr_MedianPillars_try(SEXP mat3dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mat3d(mat3dSEXP);
    rcpp_result_gen = Rcpp::wrap(MedianPillars(mat3d));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP autothresholdr_MedianPillars(SEXP mat3dSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(autothresholdr_MedianPillars_try(mat3dSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int autothresholdr_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("NumericMatrix(*MeanPillars)(NumericVector)");
        signatures.insert("NumericMatrix(*VarPillars)(NumericVector)");
        signatures.insert("NumericMatrix(*MedianPillars)(NumericVector)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP autothresholdr_RcppExport_registerCCallable() { 
    R_RegisterCCallable("autothresholdr", "autothresholdr_MeanPillars", (DL_FUNC)autothresholdr_MeanPillars_try);
    R_RegisterCCallable("autothresholdr", "autothresholdr_VarPillars", (DL_FUNC)autothresholdr_VarPillars_try);
    R_RegisterCCallable("autothresholdr", "autothresholdr_MedianPillars", (DL_FUNC)autothresholdr_MedianPillars_try);
    R_RegisterCCallable("autothresholdr", "autothresholdr_RcppExport_validate", (DL_FUNC)autothresholdr_RcppExport_validate);
    return R_NilValue;
}
